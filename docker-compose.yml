services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    depends_on:
      - zookeeper
    env_file:
      - .env
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 20000000
      KAFKA_MAX_REQUEST_SIZE: 20000000
    volumes:
      - kafka_data:/var/lib/kafka
    networks:
      - backend

  app:
    build: .
    container_name: flight_weather_dev
    volumes:
      - ./jars:/app/jars
      - .:/app
    working_dir: /app
    command: tail -f /dev/null
    depends_on:
      - kafka
      - postgres
    env_file:
      - .env
    networks:
      - backend

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: flight_db
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/00_db_schemas.sql:/docker-entrypoint-initdb.d/00_db_schemas.sql
      - ./infra/avstack/avstack_bronze_ddl.sql:/docker-entrypoint-initdb.d/01_aviationstack_bronze_ddl.sql
      - ./infra/avstack/avstack_silver_ddl.sql:/docker-entrypoint-initdb.d/02_aviationstack_silver_ddl.sql
      - ./infra/avstack/avstack_gold_ddl.sql:/docker-entrypoint-initdb.d/03_aviationstack_gold_ddl.sql
      - ./infra/opensky/opensky_bronze_ddl.sql:/docker-entrypoint-initdb.d/01_opensky_bronze_ddl.sql
    networks:
      - backend

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: local/custom-airflow:2.8.1
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__REMOTE_LOGGING: 'False'
      AIRFLOW__CORE__LOGGING_LEVEL: INFO
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass@postgres/flight_db
      AIRFLOW_CONN_PG_FLIGHT: postgresql+psycopg2://user:pass@postgres:5432/flight_db

      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-arm64
    entrypoint: /opt/airflow/entrypoint.sh
    restart: always
    volumes:
      - ./dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./requirements.txt:/requirements.txt
      - ./scripts:/opt/airflow/scripts
      - ./entrypoint.sh:/opt/airflow/entrypoint.sh
      - ./.env:/opt/airflow/.env
      - ./flightweather_dbt:/opt/airflow/flightweather_dbt
    networks:
      - backend

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: local/custom-airflow:2.8.1
    depends_on:
      - postgres
      - airflow-init
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY:  ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__REMOTE_LOGGING: 'False'
      AIRFLOW__CORE__LOGGING_LEVEL: INFO
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass@postgres/flight_db
      AIRFLOW_CONN_PG_FLIGHT: postgresql+psycopg2://user:pass@postgres:5432/flight_db
      
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-arm64
    volumes:
      - ./dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./requirements.txt:/requirements.txt
      - ./scripts:/opt/airflow/scripts
      - ./.env:/opt/airflow/.env
      - ./flightweather_dbt:/opt/airflow/flightweather_dbt
    ports:
      - "8080:8080"
    command: webserver
    restart: always
    networks:
      - backend

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: local/custom-airflow:2.8.1
    depends_on:
      - airflow-init
      - airflow-webserver
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY:  ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__REMOTE_LOGGING: 'False'
      AIRFLOW__CORE__LOGGING_LEVEL: INFO
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:pass@postgres/flight_db
      AIRFLOW_CONN_PG_FLIGHT: postgresql+psycopg2://user:pass@postgres:5432/flight_db
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080

      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-arm64
    volumes:
      - ./dags:/opt/airflow/dags
      - ./etl:/opt/airflow/etl
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./requirements.txt:/requirements.txt
      - ./scripts:/opt/airflow/scripts
      - ./.env:/opt/airflow/.env
      - ./flightweather_dbt:/opt/airflow/flightweather_dbt
    command: scheduler
    restart: always
    networks:
      - backend

volumes:
  kafka_data:
  zookeeper_data:
  pgdata:
  airflow_logs:

networks:
  backend: